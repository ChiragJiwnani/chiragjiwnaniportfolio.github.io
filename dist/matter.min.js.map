{"version":3,"sources":["matter.js"],"names":["w","canvas","ctx","mouse","py","down","px","canvas_width","resolution","pen_size","num_cols","num_rows","canvas_height","vec_cells","particles","draw","cell_data","pressure_x","preventDefault","dy","x","dist","dx","i","length","j","cell_datas","power","change_cell_velocity","mouse_xv","mouse_yv","up_left","xv","left","mouse_up_handler","up_right","right","down_right","yv","touches","e","down_left","pressure","pressure_y","strokeStyle","p","limit","y","col","parseInt","lineTo","row","beginPath","moveTo","ax","ay","Math","random","sqrt","update_pressure","update_particle","update_velocity","cell","mvelX","mvelY","mouse_move_handler","up","res","this","window","r","Fluid","initialize","particle","mouse_down_handler","touch_start_handler","rect","getBoundingClientRect","pageX","pageY","top","touch_end_handler","offsetX","layerX","offsetY","layerY","touch_move_handler","document","getElementById","width","height","push","row_up","col_left","col_right","addEventListener","onload","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame"],"mappings":"cAEA,SAAWA,GACT,IAAIC,EAAQC,EAORC,EAHQ,CAIVC,EAAE,EACFC,EAAAA,EALFC,GAAA,EAQAF,GAAA,EAHEC,MAAM,GAOJE,EAAe,IAGfC,EApBQ,IAsBRC,EAAJ,GAEIC,EAAWH,GACXI,EAAWC,EAAaJ,EAAxBG,EAAWC,EAAgBJ,EAG3BK,EAAY,GACZC,EAAY,GAwOd,SAAAC,IAEA,IAsBuBC,EAyFzBC,EAOIC,EAtHEC,EAAKH,EAAAI,EAAcjB,EAAvBG,GACIe,EAAWlB,EAAMgB,EAAEhB,EAAQmB,GAI7B,IAAAC,EAAA,EAAAA,EAAAV,EAAAW,OAAAD,IAAA,CACA,IAAIF,EAAUR,EAAAU,GApDd,IAAKE,EAAI,EAAGA,EAAIC,EAAWF,OAAQC,IAAK,CAyDxC,IAAIE,EAAQlB,EAAZgB,GApDMtB,EAAME,MACRuB,EAAqBZ,EAAWa,EAAUC,EAAUrB,QAuJ5DQ,EAAAA,EAtF2B,IAHFD,EAHxBA,GAMae,QAAQC,GAClBhB,EAAUiB,KAAKD,GAsFS,GAA5BhB,EAASkB,UAAAA,GACP,GAAA/B,EAAAgC,SAAAH,GAGFhB,EAAAoB,MAAAJ,GAtF8B,GAA1BhB,EAAUqB,WAAWL,GAwFrBd,EApFuB,GAAvBF,EAAUe,QAAQO,GAqFpBtB,EAAWf,GAAAA,GACYsC,GAAvBpC,EAAUA,SAAWqC,GAnFM,GAAzBxB,EAAUyB,UAAUH,GAoFtBnC,EAAUA,KAAMC,GACG,GAAnBD,EAAAkC,WAAmBC,GAhFnBtB,EAAU0B,SAAuC,KAA3BzB,EAAa0B,IAhEnC,IAgDE3B,EAAAA,UAAA,EADA,EAEAA,EAAAA,MAAUyB,EAAUT,QAKtB9B,EAAA0C,YAAA,UAzII,WAnCJ,IAAKrB,EAAI,EAAGA,EAAIT,EAAUU,OAAQD,IAAK,CAErC,IAAIsB,EAAI/B,EAAUS,GA2ChB,GAAQ,GAARsB,EAAIxB,GAAOyB,EAAX1B,EAAkBb,GAAA,GAAAsC,EAAAE,GAAAF,EAAAE,EAAAnC,EAAA,CAnClB,IAAIoC,EAAMC,SAASJ,EAAEzB,EAAIZ,GAuCvBN,EAAIgD,SAAaL,EAAEzC,EAJHI,GAAlBQ,EAMOH,EAAAmC,GAAAG,GAGLjD,EAAIkD,EAAAA,EAAJ5C,EAAAA,EACAN,EAAImD,EAAJN,EAAAvC,EAAAA,EAKDqC,EAEDb,KAAA,EAAAsB,GAAAtC,EAAAgB,GAAA,IAzCAa,EAAEP,KAAO,EAAIiB,GAAMvC,EAAUsB,GAAK,IA2ClCO,EAAEzC,IAAMkD,EAARtC,EAAAoB,MAAAJ,GAAA,IA3DFa,EAAAP,IA4DOgB,EAAAtC,EAAAoB,MAAAE,GAAA,IAGLO,EAAAb,IAAAuB,EAAAvC,EAAAX,KAAA2B,GAAA,IACAa,EAAEzB,IAAMd,EAAKkD,EAAKC,KAALnB,GAAgB/B,IAI7BsC,EAAEb,GAAKa,EAAPb,GACAa,EAAEP,GAAKO,EAAPP,GAvCA,IAAIhB,EAAKuB,EAAEvC,GAAKuC,EAAEzB,EA2CpBD,EAAA0B,EAAAzC,GAAAyC,EAAAE,EAGH1B,EAAAmC,KAAAE,KAAApC,EAAAA,EAAAH,EAAAA,GAKKU,EAA2BvB,GAAhBH,KAAMiB,SAIR0B,EAAPzB,GACAK,EAAAA,UAAab,EA5CbX,EAAIkD,YA+CRlD,EAAMmD,OAAOR,EAAGnB,EAAAA,EAAAA,GACdxB,EAAAgD,OAAAL,EAAAvC,GAAAuC,EAAAzC,MAQAF,EAAAkD,YAhDElD,EAAImD,OAAOR,EAAEzB,EAAGyB,EAAEE,GAiDpBY,EAAAA,OAAAA,EAAevC,EAACJ,EAAhB6B,EAAAE,EAAAD,IARA5C,EAAIc,SAgBJ4B,EAAAA,GAAAA,EAAAA,EAhDAC,EAAEzC,GAAKyC,EAAEE,OAKTF,EAAEzB,EAAIyB,EAAEvC,GAAKkD,KAAKC,SAAWlD,EAoD/BsC,EAAAE,EAAMF,EAANzC,GAAaoD,KAAG9B,SAAWF,EAI1BqB,EAAAb,GAAA,EAGHa,EAAAP,GAAA,EAEAnC,EAAAA,IAAA,GAnDE0C,EAAEP,IAAM,IAoCVsB,GAGKrC,EAAI,EAAGA,EAAIV,EAAUW,OAAQD,IAAK,CAoEzCG,EAASmC,EAAgB7C,GAjErB,IAAKS,EAAI,EAAGA,EAAIC,EAAWF,OAAQC,IAAK,CAsE1CT,EArEQA,EAAYU,EAAWD,KAO/BtB,EAAMG,GAAKH,EAAMiB,EACjBjB,EAAMC,GAAKD,EAAM4C,EAqFjB/B,sBAAAD,GAIF,SAAS+C,EAAgB9C,EAAA+C,EAAAC,EAAAvD,GAEvB,IAAAa,EAASF,EAATA,EAAAjB,EAAAiB,EACAD,EAAS4B,EAETA,EAAA5C,EAAA4C,EAnFI1B,EAAOmC,KAAKE,KAAKvC,EAAKA,EAAKG,EAAKA,GAuFpC,GAAAD,EAAWZ,EAAX,CAlFMY,EAAO,IAsFbA,EAAAZ,GAOF,IAAAkB,EAAAlB,EAAAY,EAGEL,EAASgB,IAAA+B,EAATpC,EACAX,EAAUsB,IAAA0B,EAAVrC,GA2BF,SAAAkC,EAAA7C,GA/EEA,EAAUgB,IAOR,KA4E2B,GAA/BhB,EAASiD,QAAAA,SACL/C,EAAAA,KAD2BwB,SAE7B,GAAA1B,EAAAyB,UAAAC,SAjFkC,GAA9B1B,EAAUmB,SAASO,SAkFvBvC,EAAWA,MAAXuC,SAGA,GAFAvC,EAAWA,WAEXuC,UAGD1B,EAAAsB,IAMD,KAJA,GAAAtB,EAAAe,QAAAW,SAlFM1B,EAAUkD,GAAGxB,SACiB,GAA9B1B,EAAUmB,SAASO,SACY,GAA/B1B,EAAUyB,UAAUC,SACpB1B,EAAUX,KAAKqC,SACiB,GAAhC1B,EAAUqB,WAAWK,UAwFzB1B,EAAQgB,IAAG/B,IAGXE,EAAUqC,IAAED,IAKdvC,SAAA8D,EAAU1C,EAAA2B,EAAAoB,GAAVC,KAAAhD,EAAAA,EAGCiD,KA7aHtB,EA6aYA,EAjFRqB,KAAKE,EAAIH,EAGTC,KAAKpB,IAAM,EACXoB,KAAKjB,IAAM,EAyFfoB,KAAMC,GAAAA,EArFFJ,KAAK9B,GAAK,EAGV8B,KAAK1B,SAAW,EAIlB,SAAS+B,EAASrD,EAAG2B,GACnBqB,KAAKhD,EAAIgD,KAAK9D,GAAKc,EACnBgD,KAAKrB,EAAIqB,KAAKhE,GAAK2C,EACnBqB,KAAKpC,GAAKoC,KAAK9B,GAAK,EAGtB,SAASoC,EAAmBlC,GAC1BA,EAAEtB,iBACFf,EAAME,MAAO,EAIf,SAAS6B,IACP/B,EAAME,MAAO,EAIf,SAASsE,EAAoBnC,GAC3BA,EAAEtB,iBACF,IAAI0D,EAAO3E,EAAO4E,wBAClB1E,EAAMiB,EAAIjB,EAAMG,GAAKkC,EAAED,QAAQ,GAAGuC,MAAQF,EAAK3C,KAC/C9B,EAAM4C,EAAI5C,EAAMC,GAAKoC,EAAED,QAAQ,GAAGwC,MAAQH,EAAKI,IAC/C7E,EAAME,MAAO,EAIf,SAAS4E,EAAkBzC,GACpBA,EAAED,UAASpC,EAAME,MAAO,GAO/B,SAAS4D,EAAmBzB,GAC1BA,EAAEtB,iBAEFf,EAAMG,GAAKH,EAAMiB,EACjBjB,EAAMC,GAAKD,EAAM4C,EAGjB5C,EAAMiB,EAAIoB,EAAE0C,SAAW1C,EAAE2C,OACzBhF,EAAM4C,EAAIP,EAAE4C,SAAW5C,EAAE6C,OAO3B,SAASC,EAAmB9C,GAC1BA,EAAEtB,iBACFf,EAAMG,GAAKH,EAAMiB,EACjBjB,EAAMC,GAAKD,EAAM4C,EAGjB,IAAI6B,EAAO3E,EAAO4E,wBAGlB1E,EAAMiB,EAAIoB,EAAED,QAAQ,GAAGuC,MAAQF,EAAK3C,KACpC9B,EAAM4C,EAAIP,EAAED,QAAQ,GAAGwC,MAAQH,EAAKI,IAItChF,EAAEuE,MAAQ,CACRC,WA5YF,WAYI1D,IAXFb,EAAAsF,SAAAC,eAAA,kBACAvF,EAAMA,EAAGsF,WAASC,MAIlBvF,EAAOwF,MAAQlF,EACfN,EAAOyF,OAAS9E,EAKdE,EAAAA,EAAU6E,EAjBI,IAkBZpE,IADFT,EAAU6E,KACR,IAAIlB,EAQHzB,KAAMS,SAAS/C,EAClB8C,KAAAC,SAAA7C,IAaEC,IAAAA,IAAAA,EAAUmC,IAAKG,EAAOnC,MATxB,IAYEH,EAAAA,KAAesC,GAZZA,IAAM,EAAGA,IAAMxC,EAAUwC,MAAO,CAkBrC,IAAKA,EAAY,IAAGxC,EAElBqC,IAAIhC,EAGJmC,IAAIyC,EACJpF,GAKAK,EAAQmC,KAAGnC,KAAUgF,EAErBhF,EAAIsB,KAAWtB,KAAAA,IAAUiF,IAGzB9E,EAAUkD,KAAKA,KAAff,IAAAA,IAjBJ,IAAKH,IAAM,EAAGA,IAAMtC,EAAUsC,MAC5B,IAAKG,IAAM,EAAGA,IAAMxC,EAAUwC,MAAO,CAwBhC9C,EAAOQ,EAAesC,KAAzBA,KAAAe,IAGA/B,EAAqBtB,GAAZ4B,IAAT,EAAqB5B,IAAS,EAAMsC,EAApC,EACD0C,EAAA,GAAA7C,IAAA,EAAAA,IAAA,EAAAtC,EAAA,EACFoF,EAAA9C,IAAA,EAAAtC,EAAAsC,IAAA,EAAA,EAIC+C,EAAAA,EAAiB/C,KAAA4C,GAEjBG,EAAAA,EAAiBF,GAAW3D,KAC5B6D,EAAFlF,EAAmBgF,GAAYZ,GAExBc,EAAAA,EAAiBD,GAAa7B,GAInC+B,EAASjF,GAAXmD,EACDlD,EAAAiB,KAAAA,EAzBKjB,EAAUe,QAAUA,EA4B1Bf,EAAS4C,SAAkBzB,EAtBrB+B,EAAG7D,KAAOQ,EAAUmC,KAAKG,KA6B3BlB,EAAIG,MAAAvB,EAAkBN,KAAAA,KACpBwB,EAAAM,WAAAxB,EAAAmC,KAAAG,KA3BAhB,EAASM,UAAY5B,EAAUmC,KAAKG,KAKxCnD,EAAE+F,iBAAiB,YAAarB,GA8B5B1E,EAAA+F,iBAAa,aAAYpB,GAGzB3E,EAAA+F,iBAAgBvF,UAAP0B,GAGTW,EAAAA,iBAAQ,WAAW7B,GAInB6B,EAAEb,iBAAWhB,YAALiD,GACRpB,EAAEP,iBAAWtB,YAALsE,GA/BZtF,EAAEgG,OAASjF,IArHf,CA6aGsD,QAMHA,OAAO4B,sBACL5B,OAAO4B,uBACP5B,OAAO6B,6BACP7B,OAAO8B,yBAGT5B,MAAMC","file":"matter.min.js","sourcesContent":["\n\n(function (w) {\n  var canvas, ctx;\n\n  \n    \n  var mouse = {\n    x: 0,\n    y: 0,\n    px: 0,\n    py: 0,\n    down: false\n  };\n\n  /*\n    These are the variable definitions for the values that will be used \n    throughout the rest of the script.\n    */\n  var canvas_width = 500; //Needs to be a multiple of the resolution value below.\n  var canvas_height = 500; //This too.\n\n  var resolution = 10; //Width and height of each cell in the grid.\n\n  var pen_size = 40; //Radius around the mouse cursor coordinates to reach when stirring\n\n  var num_cols = canvas_width / resolution; //This value is the number of columns in the grid.\n  var num_rows = canvas_height / resolution; //This is number of rows.\n  var speck_count = 5000; //This determines how many particles will be made.\n\n  var vec_cells = []; //The array that will contain the grid cells\n  var particles = []; //The array that will contain the particles\n\n  function init() {\n    //These lines get the canvas DOM element and canvas context, respectively.\n    canvas = document.getElementById(\"wrapper-canvas\");\n    ctx = canvas.getContext(\"2d\");\n\n    //These two set the width and height of the canvas to the defined values.\n    canvas.width = canvas_width;\n    canvas.height = canvas_height;\n\n    \n    for (i = 0; i < speck_count; i++) {\n    \n      particles.push(\n        new particle(\n          Math.random() * canvas_width,\n          Math.random() * canvas_height\n        )\n      );\n    }\n\n    //This loops through the count of columns.\n    for (col = 0; col < num_cols; col++) {\n      //This defines the array element as another array.\n      vec_cells[col] = [];\n\n      //This loops through the count of rows.\n      for (row = 0; row < num_rows; row++) {\n      \n        var cell_data = new cell(\n          col * resolution,\n          row * resolution,\n          resolution\n        );\n\n        //This pushes the cell object into the grid array.\n        vec_cells[col][row] = cell_data;\n\n        vec_cells[col][row].col = col;\n        vec_cells[col][row].row = row;\n      }\n    }\n\n   \n    for (col = 0; col < num_cols; col++) {\n      for (row = 0; row < num_rows; row++) {\n    \n        var cell_data = vec_cells[col][row];\n\n       \n        var row_up = row - 1 >= 0 ? row - 1 : num_rows - 1;\n        var col_left = col - 1 >= 0 ? col - 1 : num_cols - 1;\n        var col_right = col + 1 < num_cols ? col + 1 : 0;\n\n        //Get the reference to the cell on the row above.\n        var up = vec_cells[col][row_up];\n        var left = vec_cells[col_left][row];\n        var up_left = vec_cells[col_left][row_up];\n        var up_right = vec_cells[col_right][row_up];\n\n       \n        cell_data.up = up;\n        cell_data.left = left;\n        cell_data.up_left = up_left;\n        cell_data.up_right = up_right;\n\n        /*\n                Set the neighboring cell's opposite attributes to point to the current cell.\n                */\n        up.down = vec_cells[col][row];\n        left.right = vec_cells[col][row];\n        up_left.down_right = vec_cells[col][row];\n        up_right.down_left = vec_cells[col][row];\n      }\n    }\n\n    \n    w.addEventListener(\"mousedown\", mouse_down_handler);\n    w.addEventListener(\"touchstart\", touch_start_handler);\n\n    w.addEventListener(\"mouseup\", mouse_up_handler);\n    w.addEventListener(\"touchend\", touch_end_handler);\n\n    canvas.addEventListener(\"mousemove\", mouse_move_handler);\n    canvas.addEventListener(\"touchmove\", touch_move_handler);\n\n    //When the page is finished loading, run the draw() function.\n    w.onload = draw;\n  }\n\n \n  function update_particle() {\n    //Loops through all of the particles in the array\n    for (i = 0; i < particles.length; i++) {\n      //Sets this variable to the current particle so we can refer to the particle easier.\n      var p = particles[i];\n\n      //If the particle's X and Y coordinates are within the bounds of the canvas...\n      if (p.x >= 0 && p.x < canvas_width && p.y >= 0 && p.y < canvas_height) {\n        /*\n                These lines divide the X and Y values by the size of each cell. This number is\n                then parsed to a whole number to determine which grid cell the particle is above.\n                */\n        var col = parseInt(p.x / resolution);\n        var row = parseInt(p.y / resolution);\n\n        //Same as above, store reference to cell\n        var cell_data = vec_cells[col][row];\n\n        var ax = (p.x % resolution) / resolution;\n        var ay = (p.y % resolution) / resolution;\n\n        \n        p.xv += (1 - ax) * cell_data.xv * 0.05;\n        p.yv += (1 - ay) * cell_data.yv * 0.05;\n\n      \n        p.xv += ax * cell_data.right.xv * 0.05;\n        p.yv += ax * cell_data.right.yv * 0.05;\n\n        p.xv += ay * cell_data.down.xv * 0.05;\n        p.yv += ay * cell_data.down.yv * 0.05;\n\n        //This adds the calculated velocity to the position coordinates of the particle.\n        p.x += p.xv;\n        p.y += p.yv;\n\n        //For each axis, this gets the distance between the old position of the particle and it's new position.\n        var dx = p.px - p.x;\n        var dy = p.py - p.y;\n\n        //Using the Pythagorean theorum (A^2 + B^2 = C^2), this determines the distance the particle travelled.\n        var dist = Math.sqrt(dx * dx + dy * dy);\n\n        //This line generates a random value between 0 and 0.5\n        var limit = Math.random() * 0.5;\n\n        //If the distance the particle has travelled this frame is greater than the random value...\n        if (dist > limit) {\n          ctx.lineWidth = 1;\n          ctx.beginPath(); //Begin a new path on the canvas\n          ctx.moveTo(p.x, p.y); //Move the drawing cursor to the starting point\n          ctx.lineTo(p.px, p.py); //Describe a line from the particle's old coordinates to the new ones\n          ctx.stroke(); //Draw the path to the canvas\n        } else {\n          //If the particle hasn't moved further than the random limit...\n\n          ctx.beginPath();\n          ctx.moveTo(p.x, p.y);\n\n          ctx.lineTo(p.x + limit, p.y + limit);\n\n          ctx.stroke();\n        }\n\n        //This updates the previous X and Y coordinates of the particle to the new ones for the next loop.\n        p.px = p.x;\n        p.py = p.y;\n      } else {\n        //If the particle's X and Y coordinates are outside the bounds of the canvas...\n\n        //Place the particle at a random location on the canvas\n        p.x = p.px = Math.random() * canvas_width;\n        p.y = p.py = Math.random() * canvas_height;\n\n        //Set the particles velocity to zero.\n        p.xv = 0;\n        p.yv = 0;\n      }\n\n      //These lines divide the particle's velocity in half everytime it loops, slowing them over time.\n      p.xv *= 0.5;\n      p.yv *= 0.5;\n    }\n  }\n\n  \n  function draw() {\n   \n    var mouse_xv = mouse.x - mouse.px;\n    var mouse_yv = mouse.y - mouse.py;\n\n    //Loops through all of the columns\n    for (i = 0; i < vec_cells.length; i++) {\n      var cell_datas = vec_cells[i];\n\n      //Loops through all of the rows\n      for (j = 0; j < cell_datas.length; j++) {\n        //References the current cell\n        var cell_data = cell_datas[j];\n\n        //If the mouse button is down, updates the cell velocity using the mouse velocity\n        if (mouse.down) {\n          change_cell_velocity(cell_data, mouse_xv, mouse_yv, pen_size);\n        }\n\n        //This updates the pressure values for the cell.\n        update_pressure(cell_data);\n      }\n    }\n\n   \n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    //This sets the color to draw with.\n    ctx.strokeStyle = \"#00FFFF\";\n\n    //This calls the function to update the particle positions.\n    update_particle();\n\n    \n    for (i = 0; i < vec_cells.length; i++) {\n      var cell_datas = vec_cells[i];\n\n      for (j = 0; j < cell_datas.length; j++) {\n        var cell_data = cell_datas[j];\n\n        update_velocity(cell_data);\n      }\n    }\n\n    //This replaces the previous mouse coordinates values with the current ones for the next frame.\n    mouse.px = mouse.x;\n    mouse.py = mouse.y;\n\n    //This requests the next animation frame which runs the draw() function again.\n    requestAnimationFrame(draw);\n  }\n\n  \n  function change_cell_velocity(cell_data, mvelX, mvelY, pen_size) {\n    //This gets the distance between the cell and the mouse cursor.\n    var dx = cell_data.x - mouse.x;\n    var dy = cell_data.y - mouse.y;\n    var dist = Math.sqrt(dy * dy + dx * dx);\n\n    //If the distance is less than the radius...\n    if (dist < pen_size) {\n      //If the distance is very small, set it to the pen_size.\n      if (dist < 4) {\n        dist = pen_size;\n      }\n\n      //Calculate the magnitude of the mouse's effect (closer is stronger)\n      var power = pen_size / dist;\n\n      /*\n            Apply the velocity to the cell by multiplying the power by the mouse velocity and adding it to the cell velocity\n            */\n      cell_data.xv += mvelX * power;\n      cell_data.yv += mvelY * power;\n    }\n  }\n\n  \n  function update_pressure(cell_data) {\n    //This calculates the collective pressure on the X axis by summing the surrounding velocities\n    var pressure_x =\n      cell_data.up_left.xv * 0.5 + //Divided in half because it's diagonal\n      cell_data.left.xv +\n      cell_data.down_left.xv * 0.5 - //Same\n      cell_data.up_right.xv * 0.5 - //Same\n      cell_data.right.xv -\n      cell_data.down_right.xv * 0.5; //Same\n\n    //This does the same for the Y axis.\n    var pressure_y =\n      cell_data.up_left.yv * 0.5 +\n      cell_data.up.yv +\n      cell_data.up_right.yv * 0.5 -\n      cell_data.down_left.yv * 0.5 -\n      cell_data.down.yv -\n      cell_data.down_right.yv * 0.5;\n\n    //This sets the cell pressure to one-fourth the sum of both axis pressure.\n    cell_data.pressure = (pressure_x + pressure_y) * 0.25;\n  }\n\n \n  function update_velocity(cell_data) {\n    /*\n        This adds one-fourth of the collective pressure from surrounding cells to the \n        cell's X axis velocity.\n        */\n    cell_data.xv +=\n      (cell_data.up_left.pressure * 0.5 +\n        cell_data.left.pressure +\n        cell_data.down_left.pressure * 0.5 -\n        cell_data.up_right.pressure * 0.5 -\n        cell_data.right.pressure -\n        cell_data.down_right.pressure * 0.5) *\n      0.25;\n\n    //This does the same for the Y axis.\n    cell_data.yv +=\n      (cell_data.up_left.pressure * 0.5 +\n        cell_data.up.pressure +\n        cell_data.up_right.pressure * 0.5 -\n        cell_data.down_left.pressure * 0.5 -\n        cell_data.down.pressure -\n        cell_data.down_right.pressure * 0.5) *\n      0.25;\n\n    /*\n        This slowly decreases the cell's velocity over time so that the fluid stops\n        if it's left alone.\n        */\n    cell_data.xv *= 0.99;\n    cell_data.yv *= 0.99;\n  }\n\n  //This function is used to create a cell object.\n  function cell(x, y, res) {\n    //This stores the position to place the cell on the canvas\n    this.x = x;\n    this.y = y;\n\n    //This is the width and height of the cell\n    this.r = res;\n\n    //These are the attributes that will hold the row and column values\n    this.col = 0;\n    this.row = 0;\n\n    //This stores the cell's velocity\n    this.xv = 0;\n    this.yv = 0;\n\n    //This is the pressure attribute\n    this.pressure = 0;\n  }\n\n  //This function is used to create a particle object.\n  function particle(x, y) {\n    this.x = this.px = x;\n    this.y = this.py = y;\n    this.xv = this.yv = 0;\n  }\n\n  function mouse_down_handler(e) {\n    e.preventDefault(); //Prevents the default action from happening (e.g. navigation)\n    mouse.down = true; //Sets the mouse object's \"down\" value to true\n  }\n\n  //This function is called whenever the mouse button is released.\n  function mouse_up_handler() {\n    mouse.down = false;\n  }\n\n  //This function is called whenever a touch is registered.\n  function touch_start_handler(e) {\n    e.preventDefault(); //Prevents the default action from happening (e.g. navigation)\n    var rect = canvas.getBoundingClientRect();\n    mouse.x = mouse.px = e.touches[0].pageX - rect.left; //Set both previous and current coordinates\n    mouse.y = mouse.py = e.touches[0].pageY - rect.top;\n    mouse.down = true; //Sets the mouse object's \"down\" value to true\n  }\n\n  //This function is called whenever a touch point is removed from the screen.\n  function touch_end_handler(e) {\n    if (!e.touches) mouse.down = false; //If there are no more touches on the screen, sets \"down\" to false.\n  }\n\n  /*\n    This function is called whenever the mouse coordinates have changed. The coordinates are checked by the \n    browser at intervals.\n    */\n  function mouse_move_handler(e) {\n    e.preventDefault(); //Prevents the default action from happening\n    //Saves the previous coordinates\n    mouse.px = mouse.x;\n    mouse.py = mouse.y;\n\n    //Sets the new coordinates\n    mouse.x = e.offsetX || e.layerX;\n    mouse.y = e.offsetY || e.layerY;\n  }\n\n  /*\n    This function is called whenever one of the coordinates have changed. The coordinates are checked by the \n    browser at intervals.\n    */\n  function touch_move_handler(e) {\n    e.preventDefault(); //Prevents the default action from happening\n    mouse.px = mouse.x;\n    mouse.py = mouse.y;\n\n    //This line gets the coordinates for where the canvas is positioned on the screen.\n    var rect = canvas.getBoundingClientRect();\n\n   \n    mouse.x = e.touches[0].pageX - rect.left;\n    mouse.y = e.touches[0].pageY - rect.top;\n  }\n\n  \n  w.Fluid = {\n    initialize: init\n  };\n})(window); //Passes \"window\" into the self-invoking function.\n\n/*\nRequest animation frame polyfill. This enables you to use \"requestAnimationFrame\" \nregardless of the browser the script is running in.\n*/\nwindow.requestAnimationFrame =\n  window.requestAnimationFrame ||\n  window.webkitRequestAnimationFrame ||\n  window.mozRequestAnimationFrame;\n\n//And this line calls the init() function defined above to start the script.\nFluid.initialize();\n"]}